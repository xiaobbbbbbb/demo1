#端口
server.port=8082

##使用内嵌web容器undertow配置 打开只需要打开pom文件undertow引用
#threads.io线程数 一般就是cpu核心数 不能超过否则会报错
#threads.worker 阻塞线任务线程池 官方i0*8 这里可以改大点 单节点可承载的并发数256
#server.http2.enabled=true
#server.undertow.threads.io=16
#server.undertow.threads.worker=256
#server.undertow.buffer-size=1024
#server.undertow.direct-buffers=false


# 编码格式
server.tomcat.uri-encoding=utf-8
#jsp
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#数据库相关配置
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/mytest?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5

mybatis.mapper-locations=classpath:mapping/*Mapper.xml
mybatis.type-aliases-package=com.example.entity


#swagger2
swagger.production=false
swagger.basic.enable=false
## Basic认证用户名
swagger.basic.username=admin
## Basic认证密码
swagger.basic.password=123

#es 配置
#集群 用逗号分隔
spring.elasticsearch.rest.uris=http://192.168.2.175:9200
#连接超时时间 默认是1s
spring.elasticsearch.rest.connection-timeout= 10
#查询超时时间 默认是30s
spring.elasticsearch.rest.read-timeout=60

#spring.elasticsearch.rest.username=
#spring.elasticsearch.rest.password=

#redis
spring.redis.host=192.168.2.171
spring.redis.password=
spring.redis.port=6379
spring.redis.database=0
spring.redis.timeout=5000
#spring.redis.jedis.pool.max-active=1000
#spring.redis.jedis.pool.max-wait=-1ms
#spring.redis.jedis.pool.max-idle=200
#spring.redis.jedis.pool.min-idle=1

# lettuce 和jedis区别
# jedis和Lettuce都是Redis的客户端，它们都可以连接Redis服务器，但是在SpringBoot2.0之后默认都是使用的Lettuce这个客户端连接Redis服务器。
# 因为当使用Jedis客户端连接Redis服务器的时候，每个线程都要拿自己创建的Jedis实例去连接Redis客户端，当有很多个线程的时候，
# 不仅开销大需要反复的创建关闭一个Jedis连接，而且也是线程不安全的，一个线程通过Jedis实例更改Redis服务器中的数据之后会影响另一个线程；
#
#但是如果使用Lettuce这个客户端连接Redis服务器的时候，就不会出现上面的情况，Lettuce底层使用的是Netty，
# 当有多个线程都需要连接Redis服务器的时候，可以保证只创建一个Lettuce连接，使所有的线程共享这一个Lettuce连接，
# 这样可以减少创建关闭一个Lettuce连接时候的开销；而且这种方式也是线程安全的，
# 不会出现一个线程通过Lettuce更改Redis服务器中的数据之后而影响另一个线程的情况；

spring.redis.lettuce.pool.max-active=1000
spring.redis.lettuce.pool.max-wait=-1ms
spring.redis.lettuce.pool.max-idle=200
spring.redis.lettuce.pool.min-idle=1


